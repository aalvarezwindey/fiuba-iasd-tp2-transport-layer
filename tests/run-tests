#!/usr/bin/env python3
import argparse
import subprocess
import os
import time
import sys
import signal
import filecmp

class bcolors:
    GREEN = '\033[32m'
    RED = '\033[31m'
    ENDC = '\033[0m'

# - TESTS GLOBAL VARIABLES DEFINITIONS ##############################

absolute_path_current_dir = os.path.dirname(os.path.abspath(__file__))

tcp_server_dir = "localhost"
tcp_server_port = "6672"

original_example_file_name = "example_file.md"
original_example_file_absolute_folder = absolute_path_current_dir
original_example_file_absolute_path = original_example_file_absolute_folder + "/" + original_example_file_name

storaged_example_file_name = "storaged_example_file.md"
storaged_example_file_absolute_folder = absolute_path_current_dir
storaged_example_file_absolute_path = storaged_example_file_absolute_folder + "/" + storaged_example_file_name

downloaded_example_file_name = "downloaded_example_file.md"
downloaded_example_file_absolute_folder = absolute_path_current_dir
downloaded_example_file_absolute_path = downloaded_example_file_absolute_folder + "/" + downloaded_example_file_name

# - UTILS MULTIPURPOSE FUNCTIONS ####################################

def tcp_start_server():
  print('[SERVER] Absolute path of server storage: "{}"'.format(storaged_example_file_absolute_folder))
  svr_process = subprocess.Popen(args=[absolute_path_current_dir + '/../start-server',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-s', storaged_example_file_absolute_folder,
                         '-p', 'tcp'],
                         stdout=-1)
  print('[SERVER] PID of running TCP server: {}'.format(svr_process.pid))
  return svr_process

def tcp_start_upload():
  print('[CLIENT] Absolute path of example file: "{}"'.format(original_example_file_absolute_path))
  print('[CLIENT] Name of the file after been transferred: "{}'.format(storaged_example_file_name))
  cli_process = subprocess.Popen(args=[absolute_path_current_dir + '/../upload-file',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-s', original_example_file_absolute_path,
                         '-n', storaged_example_file_name,
                         '-p', 'tcp'],
                         stdout=-1)
  print('[CLIENT] PID of running TCP client: {}'.format(cli_process.pid))
  return cli_process

def tcp_start_download():
  print('[CLIENT] Absolute path of the downloaded file destiny: "{}"'.format(downloaded_example_file_absolute_folder))
  print('[CLIENT] Name of the file after been downloaded: "{}'.format(downloaded_example_file_name))
  cli_process = subprocess.Popen(args=[absolute_path_current_dir + '/../download-file',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-n', storaged_example_file_name,
                         '-d', downloaded_example_file_absolute_path,
                         '-p', 'tcp'],
                         stdout=-1)
  print('[CLIENT] PID of running TCP client: {}'.format(cli_process.pid))
  return cli_process

def stop_server(svr_process):
  svr_process.send_signal(signal.SIGINT)
  print("[SERVER] TCP server has been killed.")

def stop_client(cli_process):
  cli_process.send_signal(signal.SIGINT)
  print("[CLIENT] TCP client has been killed.")

# - TEST CASES FUNCTIONS ####################################

def tcp_upload_file():
  svr_process = tcp_start_server()
  # Prudential time for server setup
  time.sleep(1)

  cli_process = tcp_start_upload()

  print('[TEST] Waiting for the client to finish transferring the file...')
  cli_process.wait()

  if (cli_process.returncode == 0):
    print("[TEST] File has been fully transferred.")
  else:
    print("[TEST] Client error transferring file.")
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  
  files_are_equal = filecmp.cmp(original_example_file_absolute_path,
                                storaged_example_file_absolute_path,
                                shallow=False)
  
  if not files_are_equal:
    print("[TEST] Original and transferred files are not equal.")
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  else:
    print("[TEST] Original and transferred files are equal.")
    
  stop_server(svr_process)
  stop_client(cli_process)

  return True

def tcp_download_file():
  svr_process = tcp_start_server()
  # Prudential time for server setup
  time.sleep(1)

  cli_process = tcp_start_download()

  print('[TEST] Waiting for the client to finish downloading the file...')
  cli_process.wait()

  if (cli_process.returncode == 0):
    print("[TEST] File has been fully transferred.")
  else:
    print("[TEST] Client error receiving file.")
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  
  files_are_equal = filecmp.cmp(storaged_example_file_absolute_path,
                                downloaded_example_file_absolute_path,
                                shallow=False)
  
  if not files_are_equal:
    print("[TEST] Original and downloaded files are not equal.")
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  else:
    print("[TEST] Original and downloaded files are equal.")
    
  stop_server(svr_process)
  stop_client(cli_process)

  return True

def main():
  print(bcolors.GREEN + "[TEST TCP UPLOAD FILE]: Starting..." + bcolors.ENDC)
  pass_test_tcp_upload_file = tcp_upload_file()
  if not pass_test_tcp_upload_file:
    print(bcolors.RED + "[TEST TCP UPLOAD FILE]: Failed." + bcolors.ENDC)
  else:
    print(bcolors.GREEN + "[TEST TCP UPLOAD FILE]: Passed." + bcolors.ENDC)

  print(bcolors.GREEN + "[TEST TCP DOWNLOAD FILE]: Starting..." + bcolors.ENDC)
  pass_test_tcp_download_file = tcp_download_file()
  if not pass_test_tcp_download_file:
    print(bcolors.RED + "[TEST TCP DOWNLOAD FILE]: Failed." + bcolors.ENDC)
  else:
    print(bcolors.GREEN + "[TEST TCP DOWNLOAD FILE]: Passed." + bcolors.ENDC)

main()
