#!/usr/bin/env python3
import argparse
import subprocess
import os
import time
import sys
import signal
import filecmp

class bcolors:
    GREEN = '\033[32m'
    RED = '\033[31m'
    YELLOW  = '\033[33m'
    ENDC = '\033[0m'

# - TESTS GLOBAL VARIABLES DEFINITIONS ##############################

absolute_path_current_dir = os.path.dirname(os.path.abspath(__file__))

tcp_server_dir = "localhost"
tcp_server_port = "6693"

original_example_file_name = "example_file.md"
original_example_file_absolute_folder = absolute_path_current_dir
original_example_file_absolute_path = original_example_file_absolute_folder + "/" + original_example_file_name

storaged_tcp_example_file_name = "storaged_tcp_example_file.md"
storaged_tcp_example_file_absolute_folder = absolute_path_current_dir
storaged_tcp_example_file_absolute_path = storaged_tcp_example_file_absolute_folder + "/" + storaged_tcp_example_file_name

downloaded_tcp_example_file_name = "downloaded_tcp_example_file.md"
downloaded_tcp_example_file_absolute_folder = absolute_path_current_dir
downloaded_tcp_example_file_absolute_path = downloaded_tcp_example_file_absolute_folder + "/" + downloaded_tcp_example_file_name

storaged_udp_example_file_name = "storaged_udp_example_file.md"
storaged_udp_example_file_absolute_folder = absolute_path_current_dir
storaged_udp_example_file_absolute_path = storaged_udp_example_file_absolute_folder + "/" + storaged_udp_example_file_name

downloaded_udp_example_file_name = "downloaded_udp_example_file.md"
downloaded_udp_example_file_absolute_folder = absolute_path_current_dir
downloaded_udp_example_file_absolute_path = downloaded_udp_example_file_absolute_folder + "/" + downloaded_udp_example_file_name

WAIT_SECS_FOR_SERVER_INITIALIZATION = 1
WAIT_SECS_BETWEEN_TESTS = 0
STDOUT_VAL = -1

# - UTILS MULTIPURPOSE FUNCTIONS ####################################

def tcp_start_server():
  print('[SERVER] Absolute path of server storage: "{}"'.format(storaged_tcp_example_file_absolute_folder))
  svr_process = subprocess.Popen(args=[absolute_path_current_dir + '/../start-server',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-s', storaged_tcp_example_file_absolute_folder,
                         '-p', 'tcp'],
                         stdout=STDOUT_VAL)
  print('[SERVER] PID of running TCP server: {}'.format(svr_process.pid))
  return svr_process

def udp_start_server():
  print('[SERVER] Absolute path of server storage: "{}"'.format(storaged_udp_example_file_absolute_folder))
  svr_process = subprocess.Popen(args=[absolute_path_current_dir + '/../start-server',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-s', storaged_udp_example_file_absolute_folder,
                         '-p', 'udp'],
                         stdout=STDOUT_VAL)
  print('[SERVER] PID of running TCP server: {}'.format(svr_process.pid))
  return svr_process

def tcp_start_upload():
  print('[CLIENT] Absolute path of example file: "{}"'.format(original_example_file_absolute_path))
  print('[CLIENT] Name of the file after been transferred: "{}'.format(storaged_tcp_example_file_name))
  cli_process = subprocess.Popen(args=[absolute_path_current_dir + '/../upload-file',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-s', original_example_file_absolute_path,
                         '-n', storaged_tcp_example_file_name,
                         '-p', 'tcp'],
                         stdout=STDOUT_VAL)
  print('[CLIENT] PID of running TCP client: {}'.format(cli_process.pid))
  return cli_process

def udp_start_upload():
  print('[CLIENT] Absolute path of example file: "{}"'.format(original_example_file_absolute_path))
  print('[CLIENT] Name of the file after been transferred: "{}'.format(storaged_udp_example_file_name))
  cli_process = subprocess.Popen(args=[absolute_path_current_dir + '/../upload-file',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-s', original_example_file_absolute_path,
                         '-n', storaged_udp_example_file_name,
                         '-p', 'udp'],
                         stdout=STDOUT_VAL)
  print('[CLIENT] PID of running TCP client: {}'.format(cli_process.pid))
  return cli_process

def tcp_start_download():
  print('[CLIENT] Absolute path of the downloaded file destiny: "{}"'.format(downloaded_tcp_example_file_absolute_folder))
  print('[CLIENT] Name of the file after been downloaded: "{}'.format(downloaded_tcp_example_file_name))
  cli_process = subprocess.Popen(args=[absolute_path_current_dir + '/../download-file',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-n', original_example_file_name,
                         '-d', downloaded_tcp_example_file_absolute_path,
                         '-p', 'tcp'],
                         stdout=STDOUT_VAL)
  print('[CLIENT] PID of running TCP client: {}'.format(cli_process.pid))
  return cli_process

def udp_start_download():
  print('[CLIENT] Absolute path of the downloaded file destiny: "{}"'.format(downloaded_udp_example_file_absolute_folder))
  print('[CLIENT] Name of the file after been downloaded: "{}'.format(downloaded_udp_example_file_name))
  cli_process = subprocess.Popen(args=[absolute_path_current_dir + '/../download-file',
                         '-H', tcp_server_dir,
                         '-P', tcp_server_port,
                         '-n', original_example_file_name,
                         '-d', downloaded_udp_example_file_absolute_path,
                         '-p', 'udp'],
                         stdout=STDOUT_VAL)
  print('[CLIENT] PID of running TCP client: {}'.format(cli_process.pid))
  return cli_process

def stop_server(svr_process):
  svr_process.send_signal(signal.SIGINT)
  svr_process.wait()
  print("[SERVER] TCP server has been killed.")

def stop_client(cli_process):
  cli_process.send_signal(signal.SIGINT)
  cli_process.wait()
  print("[CLIENT] TCP client has been killed.")

# - TEST CASES FUNCTIONS ####################################

def tcp_upload_file():
  svr_process = tcp_start_server()
  # Prudential time for server setup
  time.sleep(WAIT_SECS_FOR_SERVER_INITIALIZATION)

  cli_process = tcp_start_upload()

  print('[TEST] Waiting for the client to finish transferring the file...')
  cli_process.wait()

  if (cli_process.returncode == 0):
    print("[TEST] File has been fully transferred.")
  else:
    print(bcolors.RED + "[TEST] Client error transferring file." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  
  files_are_equal = filecmp.cmp(original_example_file_absolute_path,
                                storaged_tcp_example_file_absolute_path,
                                shallow=False)

  os.remove(storaged_tcp_example_file_absolute_path)
  
  if not files_are_equal:
    print(bcolors.RED + "[TEST] Original and transferred files are not equal." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  else:
    print("[TEST] Original and transferred files are equal.")
    
  stop_server(svr_process)
  stop_client(cli_process)

  return True

def tcp_download_file():
  svr_process = tcp_start_server()
  # Prudential time for server setup
  time.sleep(WAIT_SECS_FOR_SERVER_INITIALIZATION)

  cli_process = tcp_start_download()

  print('[TEST] Waiting for the client to finish downloading the file...')
  cli_process.wait()

  if (cli_process.returncode == 0):
    print("[TEST] File has been fully transferred.")
  else:
    print(bcolors.RED + "[TEST] Client error receiving file." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  
  files_are_equal = filecmp.cmp(original_example_file_absolute_path,
                                downloaded_tcp_example_file_absolute_path,
                                shallow=False)
  
  os.remove(downloaded_tcp_example_file_absolute_path)

  if not files_are_equal:
    print(bcolors.RED + "[TEST] Original and downloaded files are not equal." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  else:
    print("[TEST] Original and downloaded files are equal.")
    
  stop_server(svr_process)
  stop_client(cli_process)

  return True

def test_tcp_download_file_with_packet_loss():
  comcast = subprocess.Popen('comcast --device=lo --packet-loss=15%', shell=True, stdout=subprocess.PIPE)
  comcast.wait()
  print('comcast start return code: {}'.format(comcast.returncode))

  if comcast.returncode != 0:
    print(bcolors.YELLOW + "[TEST TCP DOWNLOAD FILE WITH PACKET LOSS]: could not run comcast be sure to install it." + bcolors.ENDC)
    return True

  result = tcp_download_file()

  comcast = subprocess.Popen('comcast --stop --device=lo', shell=True, stdout=subprocess.PIPE)
  comcast.wait()
  print('comcast stop return code: {}'.format(comcast.returncode))
  return result

def test_tcp_upload_file_with_packet_loss():
  comcast = subprocess.Popen('comcast --device=lo --packet-loss=15%', shell=True, stdout=subprocess.PIPE)
  comcast.wait()
  print('comcast start return code: {}'.format(comcast.returncode))

  if comcast.returncode != 0:
    print(bcolors.YELLOW + "[TEST TCP UPLOAD FILE WITH PACKET LOSS]: could not run comcast be sure to install it." + bcolors.ENDC)
    return True

  result = tcp_upload_file()

  comcast = subprocess.Popen('comcast --stop --device=lo', shell=True, stdout=subprocess.PIPE)
  comcast.wait()
  print('comcast stop return code: {}'.format(comcast.returncode))
  return result

def udp_upload_file():
  svr_process = udp_start_server()
  # Prudential time for server setup
  time.sleep(WAIT_SECS_FOR_SERVER_INITIALIZATION)

  cli_process = udp_start_upload()

  print('[TEST] Waiting for the client to finish transferring the file...')
  cli_process.wait()

  if (cli_process.returncode == 0):
    print("[TEST] File has been fully transferred.")
  else:
    print(bcolors.RED + "[TEST] Client error transferring file." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  
  files_are_equal = filecmp.cmp(original_example_file_absolute_path,
                                storaged_udp_example_file_absolute_path,
                                shallow=False)

  os.remove(storaged_udp_example_file_absolute_path)
  
  if not files_are_equal:
    print(bcolors.RED + "[TEST] Original and transferred files are not equal." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  else:
    print("[TEST] Original and transferred files are equal.")
    
  stop_server(svr_process)
  stop_client(cli_process)

  return True

def udp_download_file():
  svr_process = udp_start_server()
  # Prudential time for server setup
  time.sleep(WAIT_SECS_FOR_SERVER_INITIALIZATION)

  cli_process = udp_start_download()

  print('[TEST] Waiting for the client to finish downloading the file...')
  cli_process.wait()

  if (cli_process.returncode == 0):
    print("[TEST] File has been fully transferred.")
  else:
    print(bcolors.RED + "[TEST] Client error receiving file." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  
  files_are_equal = filecmp.cmp(original_example_file_absolute_path,
                                downloaded_udp_example_file_absolute_path,
                                shallow=False)
  
  os.remove(downloaded_udp_example_file_absolute_path)

  if not files_are_equal:
    print(bcolors.RED + "[TEST] Original and downloaded files are not equal." + bcolors.ENDC)
    stop_server(svr_process)
    stop_client(cli_process)
    return False
  else:
    print("[TEST] Original and downloaded files are equal.")
    
  stop_server(svr_process)
  stop_client(cli_process)

  return True

def test_udp_upload_file_with_packet_loss():
  comcast = subprocess.Popen('comcast --device=lo --packet-loss=15%', shell=True, stdout=subprocess.PIPE)
  comcast.wait()
  print('comcast start return code: {}'.format(comcast.returncode))

  if comcast.returncode != 0:
    print(bcolors.YELLOW + "[TEST UDP UPLOAD FILE WITH PACKET LOSS]: could not run comcast be sure to install it." + bcolors.ENDC)
    return True

  result = udp_upload_file()

  comcast = subprocess.Popen('comcast --stop --device=lo', shell=True, stdout=subprocess.PIPE)
  comcast.wait()
  print('comcast stop return code: {}'.format(comcast.returncode))
  return result

def main():

  #while True:

    print(bcolors.GREEN + "[TEST TCP UPLOAD FILE]: Starting..." + bcolors.ENDC)
    pass_test_tcp_upload_file = tcp_upload_file()
    if not pass_test_tcp_upload_file:
      print(bcolors.RED + "[TEST TCP UPLOAD FILE]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST TCP UPLOAD FILE]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)

    print(bcolors.GREEN + "[TEST TCP DOWNLOAD FILE]: Starting..." + bcolors.ENDC)
    pass_test_tcp_download_file = tcp_download_file()
    if not pass_test_tcp_download_file:
      print(bcolors.RED + "[TEST TCP DOWNLOAD FILE]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST TCP DOWNLOAD FILE]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)

    print(bcolors.GREEN + "[TEST TCP UPLOAD FILE WITH PACKET LOSS]: Starting..." + bcolors.ENDC)
    pass_test_tcp_upload_file_with_packet_loss = test_tcp_upload_file_with_packet_loss()
    if not pass_test_tcp_upload_file_with_packet_loss:
      print(bcolors.RED + "[TEST TCP UPLOAD FILE WITH PACKET LOSS]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST TCP UPLOAD FILE WITH PACKET LOSS]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)

    print(bcolors.GREEN + "[TEST TCP DOWNLOAD FILE WITH PACKET LOSS]: Starting..." + bcolors.ENDC)
    pass_test_tcp_download_file_with_packet_loss = test_tcp_download_file_with_packet_loss()
    if not pass_test_tcp_download_file_with_packet_loss:
      print(bcolors.RED + "[TEST TCP DOWNLOAD FILE WITH PACKET LOSS]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST TCP DOWNLOAD FILE WITH PACKET LOSS]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)

    print(bcolors.GREEN + "[TEST UDP UPLOAD FILE]: Starting..." + bcolors.ENDC)
    pass_test_udp_upload_file = udp_upload_file()
    if not pass_test_udp_upload_file:
      print(bcolors.RED + "[TEST UDP UPLOAD FILE]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST UDP UPLOAD FILE]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)

    print(bcolors.GREEN + "[TEST UDP DOWNLOAD FILE]: Starting..." + bcolors.ENDC)
    pass_test_udp_download_file = udp_download_file()
    if not pass_test_udp_download_file:
      print(bcolors.RED + "[TEST UDP DOWNLOAD FILE]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST UDP DOWNLOAD FILE]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)

    print(bcolors.GREEN + "[TEST UDP UPLOAD FILE WITH PACKET LOSS]: Starting..." + bcolors.ENDC)
    pass_test_udp_upload_file_with_packet_loss = test_udp_upload_file_with_packet_loss()
    if not pass_test_udp_upload_file_with_packet_loss:
      print(bcolors.RED + "[TEST UDP UPLOAD FILE WITH PACKET LOSS]: Failed." + bcolors.ENDC)
      return
    else:
      print(bcolors.GREEN + "[TEST UDP UPLOAD FILE WITH PACKET LOSS]: Passed." + bcolors.ENDC)

    time.sleep(WAIT_SECS_BETWEEN_TESTS)


main()
